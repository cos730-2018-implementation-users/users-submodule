{"version":3,"sources":["../../app/index.js"],"names":["require","config","Koa","bodyParser","cors","jwt","errorHandler","logMiddleware","logger","requestId","responseHandler","globalUtils","router","app","proxy","use","ctx","next","catch","err","status","body","error","originalError","message","enableTypes","formLimit","jsonLimit","origin","allowMethods","exposeHeaders","secret","unless","path","routes","allowedMethods","onError","event","on","module","parent","server","listen","port","host","info","env","exports"],"mappings":";;AACAA,QAAQ,qBAAR;AACAA,QAAQ,gBAAR;;AAEA;AACA,IAAMC,SAASD,QAAQ,UAAR,CAAf;;AAEA,IAAME,MAAMF,QAAQ,KAAR,CAAZ;AACA,IAAMG,aAAaH,QAAQ,gBAAR,CAAnB;AACA,IAAMI,OAAOJ,QAAQ,OAAR,CAAb;AACA,IAAMK,MAAML,QAAQ,SAAR,CAAZ;AACA,IAAMM,eAAeN,QAAQ,4BAAR,CAArB;AACA,IAAMO,gBAAgBP,QAAQ,mBAAR,CAAtB;AACA,IAAMQ,SAASR,QAAQ,UAAR,CAAf;AACA,IAAMS,YAAYT,QAAQ,yBAAR,CAAlB;AACA,IAAMU,kBAAkBV,QAAQ,+BAAR,CAAxB;AACA,IAAMW,cAAcX,QAAQ,2BAAR,CAApB;AACA,IAAMY,SAASZ,QAAQ,UAAR,CAAf;;AAGA,IAAMa,MAAM,IAAIX,GAAJ,EAAZ;;AAEA;AACAW,IAAIC,KAAJ,GAAY,IAAZ;;AAEAD,IAAIE,GAAJ,CAAQ,UAACC,GAAD,EAAMC,IAAN;AAAA,SAAeA,OAAOC,KAAP,CAAa,UAACC,GAAD,EAAS;AAC3C,QAAIA,IAAIC,MAAJ,KAAe,GAAnB,EAAwB;AACtBJ,UAAII,MAAJ,GAAa,GAAb;AACAJ,UAAIK,IAAJ,GAAW;AACTC,eAAOH,IAAII,aAAJ,GAAoBJ,IAAII,aAAJ,CAAkBC,OAAtC,GAAgDL,IAAIK;AADlD,OAAX;AAGD,KALD,MAKO;AACL,YAAML,GAAN;AACD;AACF,GATsB,CAAf;AAAA,CAAR;;AAWA;AACAN,IAAIE,GAAJ,CAAQZ,WAAW;AACjBsB,eAAa,CAAC,MAAD,EAAS,MAAT,CADI;AAEjBC,aAAW,MAFM;AAGjBC,aAAW;AAHM,CAAX,CAAR;AAKAd,IAAIE,GAAJ,CAAQN,WAAR;AACAI,IAAIE,GAAJ,CAAQX,KAAK;AACXwB,UAAQ,GADG;AAEXC,gBAAc,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B,QAA/B,EAAyC,OAAzC,CAFH;AAGXC,iBAAe,CAAC,cAAD;AAHJ,CAAL,CAAR;AAKAjB,IAAIE,GAAJ,CAAQL,iBAAR;AACAG,IAAIE,GAAJ,CAAQT,cAAR;AACAO,IAAIE,GAAJ,CAAQR,cAAc,EAAEC,cAAF,EAAd,CAAR;AACAK,IAAIE,GAAJ,CAAQJ,aAAR;;AAEA;AACAE,IAAIE,GAAJ,CAAQV,IAAI,EAAE0B,QAAQ,cAAV,EAAJ,EAAgCC,MAAhC,CAAuC,EAAEC,MAAM,CAAC,GAAD,EAAM,OAAN,EAAe,aAAf,CAAR,EAAvC,CAAR;;AAEApB,IAAIE,GAAJ,CAAQH,OAAOsB,MAAP,EAAR;AACArB,IAAIE,GAAJ,CAAQH,OAAOuB,cAAP,EAAR;;AAEA,SAASC,OAAT,CAAiBjB,GAAjB,EAAsB;AACpBX,SAAOc,KAAP,CAAa,EAAEH,QAAF,EAAOkB,OAAO,OAAd,EAAb,EAAsC,6BAAtC;AACD;;AAED;AACAxB,IAAIyB,EAAJ,CAAO,OAAP,EAAgBF,OAAhB;;AAEA;AACA,IAAI,CAACG,OAAOC,MAAZ,EAAoB;AAClB,MAAMC,SAAS5B,IAAI6B,MAAJ,CAAWzC,OAAO0C,IAAlB,EAAwB1C,OAAO2C,IAA/B,EAAqC,YAAM;AACxDpC,WAAOqC,IAAP,CAAY,EAAER,OAAO,SAAT,EAAZ,+BAA6DpC,OAAO2C,IAApE,SAA4E3C,OAAO0C,IAAnF,aAA+F1C,OAAO6C,GAAtG;AACD,GAFc,CAAf;AAGAL,SAAOH,EAAP,CAAU,OAAV,EAAmBF,OAAnB;AACD;;AAED;AACAG,OAAOQ,OAAP,GAAiBlC,GAAjB","file":"index.js","sourcesContent":["\nrequire('babel-core/register');\nrequire('babel-polyfill');\n\n// Load APM on production environment\nconst config = require('./config');\n\nconst Koa = require('koa');\nconst bodyParser = require('koa-bodyparser');\nconst cors = require('kcors');\nconst jwt = require('koa-jwt');\nconst errorHandler = require('./middlewares/errorHandler');\nconst logMiddleware = require('./middlewares/log');\nconst logger = require('./logger');\nconst requestId = require('./middlewares/requestId');\nconst responseHandler = require('./middlewares/responseHandler');\nconst globalUtils = require('./middlewares/globalUtils');\nconst router = require('./routes');\n\n\nconst app = new Koa();\n\n// Trust proxy\napp.proxy = true;\n\napp.use((ctx, next) => next().catch((err) => {\n  if (err.status === 401) {\n    ctx.status = 401;\n    ctx.body = {\n      error: err.originalError ? err.originalError.message : err.message,\n    };\n  } else {\n    throw err;\n  }\n}));\n\n// Set middlewares\napp.use(bodyParser({\n  enableTypes: ['json', 'form'],\n  formLimit: '10mb',\n  jsonLimit: '10mb',\n}));\napp.use(requestId());\napp.use(cors({\n  origin: '*',\n  allowMethods: ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'PATCH'],\n  exposeHeaders: ['X-Request-Id'],\n}));\napp.use(responseHandler());\napp.use(errorHandler());\napp.use(logMiddleware({ logger }));\napp.use(globalUtils());\n\n// Bootstrap application router\napp.use(jwt({ secret: 'HelloWorld99' }).unless({ path: ['/', '/spec', '/user/login'] }));\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nfunction onError(err) {\n  logger.error({ err, event: 'error' }, 'Unhandled exception occured');\n}\n\n// Handle uncaught errors\napp.on('error', onError);\n\n// Start server\nif (!module.parent) {\n  const server = app.listen(config.port, config.host, () => {\n    logger.info({ event: 'execute' }, `API server listening on ${config.host}:${config.port}, in ${config.env}`);\n  });\n  server.on('error', onError);\n}\n\n// Expose app\nmodule.exports = app;\n"]}