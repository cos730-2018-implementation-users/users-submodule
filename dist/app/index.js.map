{"version":3,"sources":["../../app/index.js"],"names":["config","require","Koa","bodyParser","cors","errorHandler","logMiddleware","logger","requestId","responseHandler","router","app","proxy","use","enableTypes","formLimit","jsonLimit","origin","allowMethods","exposeHeaders","routes","allowedMethods","onError","err","error","event","on","module","parent","server","listen","port","host","info","env","exports"],"mappings":";;AAEA;AACA,IAAMA,SAASC,QAAQ,UAAR,CAAf;;AAEA,IAAMC,MAAMD,QAAQ,KAAR,CAAZ;AACA,IAAME,aAAaF,QAAQ,gBAAR,CAAnB;AACA,IAAMG,OAAOH,QAAQ,OAAR,CAAb;AACA,IAAMI,eAAeJ,QAAQ,4BAAR,CAArB;AACA,IAAMK,gBAAgBL,QAAQ,mBAAR,CAAtB;AACA,IAAMM,SAASN,QAAQ,UAAR,CAAf;AACA,IAAMO,YAAYP,QAAQ,yBAAR,CAAlB;AACA,IAAMQ,kBAAkBR,QAAQ,+BAAR,CAAxB;AACA,IAAMS,SAAST,QAAQ,UAAR,CAAf;;AAGA,IAAMU,MAAM,IAAIT,GAAJ,EAAZ;;AAEA;AACAS,IAAIC,KAAJ,GAAY,IAAZ;;AAEA;AACAD,IAAIE,GAAJ,CAAQV,WAAW;AACjBW,eAAa,CAAC,MAAD,EAAS,MAAT,CADI;AAEjBC,aAAW,MAFM;AAGjBC,aAAW;AAHM,CAAX,CAAR;AAKAL,IAAIE,GAAJ,CAAQL,WAAR;AACAG,IAAIE,GAAJ,CAAQT,KAAK;AACXa,UAAQ,GADG;AAEXC,gBAAc,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,MAAvB,EAA+B,QAA/B,EAAyC,OAAzC,CAFH;AAGXC,iBAAe,CAAC,cAAD;AAHJ,CAAL,CAAR;AAKAR,IAAIE,GAAJ,CAAQJ,iBAAR;AACAE,IAAIE,GAAJ,CAAQR,cAAR;AACAM,IAAIE,GAAJ,CAAQP,cAAc,EAAEC,cAAF,EAAd,CAAR;;AAEA;AACAI,IAAIE,GAAJ,CAAQH,OAAOU,MAAP,EAAR;AACAT,IAAIE,GAAJ,CAAQH,OAAOW,cAAP,EAAR;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpBhB,SAAOiB,KAAP,CAAa,EAAED,QAAF,EAAOE,OAAO,OAAd,EAAb,EAAsC,6BAAtC;AACD;;AAED;AACAd,IAAIe,EAAJ,CAAO,OAAP,EAAgBJ,OAAhB;;AAEA;AACA,IAAI,CAACK,OAAOC,MAAZ,EAAoB;AAClB,MAAMC,SAASlB,IAAImB,MAAJ,CAAW9B,OAAO+B,IAAlB,EAAwB/B,OAAOgC,IAA/B,EAAqC,YAAM;AACxDzB,WAAO0B,IAAP,CAAY,EAAER,OAAO,SAAT,EAAZ,+BAA6DzB,OAAOgC,IAApE,SAA4EhC,OAAO+B,IAAnF,aAA+F/B,OAAOkC,GAAtG;AACD,GAFc,CAAf;AAGAL,SAAOH,EAAP,CAAU,OAAV,EAAmBJ,OAAnB;AACD;;AAED;AACAK,OAAOQ,OAAP,GAAiBxB,GAAjB","file":"index.js","sourcesContent":["\n\n// Load APM on production environment\nconst config = require('./config');\n\nconst Koa = require('koa');\nconst bodyParser = require('koa-bodyparser');\nconst cors = require('kcors');\nconst errorHandler = require('./middlewares/errorHandler');\nconst logMiddleware = require('./middlewares/log');\nconst logger = require('./logger');\nconst requestId = require('./middlewares/requestId');\nconst responseHandler = require('./middlewares/responseHandler');\nconst router = require('./routes');\n\n\nconst app = new Koa();\n\n// Trust proxy\napp.proxy = true;\n\n// Set middlewares\napp.use(bodyParser({\n  enableTypes: ['json', 'form'],\n  formLimit: '10mb',\n  jsonLimit: '10mb',\n}));\napp.use(requestId());\napp.use(cors({\n  origin: '*',\n  allowMethods: ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'PATCH'],\n  exposeHeaders: ['X-Request-Id'],\n}));\napp.use(responseHandler());\napp.use(errorHandler());\napp.use(logMiddleware({ logger }));\n\n// Bootstrap application router\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nfunction onError(err) {\n  logger.error({ err, event: 'error' }, 'Unhandled exception occured');\n}\n\n// Handle uncaught errors\napp.on('error', onError);\n\n// Start server\nif (!module.parent) {\n  const server = app.listen(config.port, config.host, () => {\n    logger.info({ event: 'execute' }, `API server listening on ${config.host}:${config.port}, in ${config.env}`);\n  });\n  server.on('error', onError);\n}\n\n// Expose app\nmodule.exports = app;\n"]}