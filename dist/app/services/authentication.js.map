{"version":3,"sources":["../../../app/services/authentication.js"],"names":["db","username","password","query","aql","cursor","next","user","errorResponse","code","message","data","Promise","reject","status","response","result","bcrypt","compareSync","UserResponse","resolve","login","ctx","res","ok","logout"],"mappings":";;;;;;;AAIA;;;;qEAGO,iBAAqBA,EAArB,EAAyBC,QAAzB,EAAmCC,QAAnC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEkBF,GAAGG,KAAH,KAASC,aAAT,mBAECH,QAFD,EAFlB;;AAAA;AAEGI,kBAFH;AAAA;AAAA,mBAQgBA,OAAOC,IAAP,EARhB;;AAAA;AAQGC,gBARH;;AAAA,gBASEA,IATF;AAAA;AAAA;AAAA;;AAUKC,yBAVL,GAUqB;AACpBC,oBAAM,GADc;AAEpBC,uBAAS,mCAFW;AAGpBC,oBAAM;AAHc,aAVrB;AAAA,6CAeMC,QAAQC,MAAR,CAAeL,aAAf,CAfN;;AAAA;AAAA,kBAkBCD,KAAKO,MAAL,KAAgB,QAlBjB;AAAA;AAAA;AAAA;;AAmBKN,0BAnBL,GAmBqB;AACpBC,oBAAM,GADc;AAEpBC,uBAAS,qDAFW;AAGpBC,oBAAM;AAHc,aAnBrB;AAAA,6CAwBMC,QAAQC,MAAR,CAAeL,cAAf,CAxBN;;AAAA;AA2BGO,oBA3BH,GA2Bc;AACfC,sBAAQC,mBAAOC,WAAP,CAAmBhB,QAAnB,EAA6BK,KAAKL,QAAlC,CADO;AAEfS,oBAAM,IAAIQ,sBAAJ,CAAiBZ,IAAjB;AAFS,aA3Bd;;AAAA,gBAgCEQ,SAASC,MAhCX;AAAA;AAAA;AAAA;;AAiCKR,2BAjCL,GAiCqB;AACpBC,oBAAM,GADc;AAEpBC,uBAAS,mCAFW;AAGpBC,oBAAM;AAHc,aAjCrB;AAAA,6CAsCMC,QAAQC,MAAR,CAAeL,eAAf,CAtCN;;AAAA;AAAA,6CAyCII,QAAQQ,OAAR,CAAgBL,QAAhB,CAzCJ;;AAAA;AAAA;AAAA;AA2CGP,2BA3CH,GA2CmB;AACpBC,oBAAM,GADc;AAEpBC,uBAAS,iCAFW;AAGpBC;AAHoB,aA3CnB;AAAA,6CAgDIC,QAAQC,MAAR,CAAeL,eAAf,CAhDJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAea,K;;;;;AAoDtB;;;;;;;;;;;;;;;;;;;;;sEAkBO,kBAAsBC,GAAtB,EAA2BhB,IAA3B;AAAA;AAAA;AAAA;AAAA;AACL;;AAEAgB,gBAAIC,GAAJ,CAAQC,EAAR,CAAW,0BAAX;AAHK,8CAIElB,MAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAemB,M;;;;;;;AA7EtB;;AACA;;;;AACA","file":"authentication.js","sourcesContent":["import { aql } from 'arangojs';\nimport bcrypt from 'bcryptjs';\nimport UserResponse from '../mappers/userResponse';\n\n/**\n* Attemps to log a user into the system.\n*/\nexport async function login(db, username, password) {\n  try {\n    const cursor = await db.query(aql`\n      FOR u IN Users\n      FILTER u.email == ${username}\n      RETURN u\n      `);\n\n    const user = await cursor.next();\n    if (!user) {\n      const errorResponse = {\n        code: 401,\n        message: 'Invalid username and/or password.',\n        data: {},\n      };\n      return Promise.reject(errorResponse);\n    }\n\n    if (user.status !== 'active') {\n      const errorResponse = {\n        code: 403,\n        message: 'Your account is not active. Please contact support.',\n        data: {},\n      };\n      return Promise.reject(errorResponse);\n    }\n\n    const response = {\n      result: bcrypt.compareSync(password, user.password),\n      data: new UserResponse(user),\n    };\n\n    if (!response.result) {\n      const errorResponse = {\n        code: 401,\n        message: 'Invalid username and/or password.',\n        data: {},\n      };\n      return Promise.reject(errorResponse);\n    }\n\n    return Promise.resolve(response);\n  } catch (err) {\n    const errorResponse = {\n      code: 500,\n      message: 'Internal server error occurred.',\n      data: err,\n    };\n    return Promise.reject(errorResponse);\n  }\n}\n\n/**\n * @swagger\n * /user/logout:\n *   get:\n *     tags:\n *       - Authentication\n *     summary: Logs out current logged in user session.\n *     parameters:\n *       - $ref: '#/parameters/bearer_authorization'\n *     operationId: userLogout\n *     responses:\n *       204:\n *         $ref: '#/responses/NoContent'\n *       401:\n *         $ref: '#/responses/Unauthorized'\n *       500:\n *         $ref: '#/responses/InternalServerError'\n */\nexport async function logout(ctx, next) {\n  // TODO - complete the logic of this function...\n\n  ctx.res.ok('Successfully logged out.');\n  return next();\n}\n"]}