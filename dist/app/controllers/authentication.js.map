{"version":3,"sources":["../../../app/controllers/authentication.js"],"names":["ctx","next","request","header","authorization","res","unauthorized","authorisation","includes","credentials","split","username","password","db","response","userObj","JSON","parse","stringify","data","status","statusCodes","OK","body","jwt","sign","jwtSecret","console","log","code","message","forbidden","internalServerError","userLogin","noContent","userLogout"],"mappings":";;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;qEAyBO,iBAAyBA,GAAzB,EAA8BC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAEED,IAAIE,OAAJ,CAAYC,MAAZ,CAAmBC,aAFrB;AAAA;AAAA;AAAA;;AAGDJ,gBAAIK,GAAJ,CAAQC,YAAR,CAAqB,yBAArB,EAAgD,EAAhD;AAHC,6CAIML,MAJN;;AAAA;AAOGM,yBAPH,GAOmBP,IAAIE,OAAJ,CAAYC,MAAZ,CAAmBC,aAPtC;;AAAA,gBAQEG,cAAcC,QAAd,CAAuB,OAAvB,CARF;AAAA;AAAA;AAAA;;AASDR,gBAAIK,GAAJ,CAAQC,YAAR,CAAqB,gCAArB,EAAuD,EAAvD;AATC,6CAUML,MAVN;;AAAA;AAaGQ,uBAbH,GAaiB,oBAAKF,cAAcG,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAL,EAAkCA,KAAlC,CAAwC,GAAxC,CAbjB;AAcGC,oBAdH,GAccF,YAAY,CAAZ,CAdd;AAeGG,oBAfH,GAecH,YAAY,CAAZ,CAfd;AAAA;AAAA,mBAiBoB,2BAAMT,IAAIa,EAAV,EAAcF,QAAd,EAAwBC,QAAxB,CAjBpB;;AAAA;AAiBGE,oBAjBH;AAkBGC,mBAlBH,GAkBaC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeJ,SAASK,IAAxB,CAAX,CAlBb;;;AAoBHnB,gBAAIoB,MAAJ,GAAapB,IAAIK,GAAJ,CAAQgB,WAAR,CAAoBC,EAAjC;AACAtB,gBAAIuB,IAAJ,GAAW;AACTC,mBAAKA,uBAAIC,IAAJ,CAASV,OAAT,EAAkBf,IAAI0B,SAAtB;AADI,aAAX;;AArBG,6CAyBIzB,MAzBJ;;AAAA;AAAA;AAAA;;AA2BH0B,oBAAQC,GAAR,CAAY,QAAZ;;AA3BG,kBA4BC,YAAIC,IAAJ,KAAa,GA5Bd;AAAA;AAAA;AAAA;;AA6BD7B,gBAAIK,GAAJ,CAAQC,YAAR,CAAqB,YAAIwB,OAAzB,EAAkC,YAAIX,IAAtC;AA7BC,6CA8BMlB,MA9BN;;AAAA;AAAA,kBA+BQ,YAAI4B,IAAJ,KAAa,GA/BrB;AAAA;AAAA;AAAA;;AAgCD7B,gBAAIK,GAAJ,CAAQ0B,SAAR,CAAkB,YAAID,OAAtB,EAA+B,YAAIX,IAAnC;AAhCC,6CAiCMlB,MAjCN;;AAAA;;AAoCHD,gBAAIK,GAAJ,CAAQ2B,mBAAR,CAA4B,GAA5B,EAAiC,6BAAjC,EAAgE,EAAhE;AApCG,6CAqCI/B,MArCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAegC,S;;;;;AAyCtB;;;;;;;;;;;;;;;;;;;;;sEAkBO,kBAA0BjC,GAA1B,EAA+BC,IAA/B;AAAA;AAAA;AAAA;AAAA;AACL;;AAEAD,gBAAIK,GAAJ,CAAQ6B,SAAR,CAAkB,EAAlB,EAAsB,0BAAtB;AAHK,8CAIEjC,MAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAekC,U;;;;;AAxFtB;;;;AACA;;;;AACA","file":"authentication.js","sourcesContent":["import atob from 'atob';\nimport jwt from 'jsonwebtoken';\nimport { login } from '../services/authentication';\n\n/**\n * @swagger\n * /user/login:\n *   get:\n *     tags:\n *       - Authentication\n *     summary: Logs user into the system.\n *     operationId: userLogin\n *     parameters:\n *       - $ref: '#/parameters/basic_authorization'\n *     responses:\n *       200:\n *         description: Successfully logged-in\n *         schema:\n *           $ref: '#/definitions/AuthenticationResponse'\n *         headers:\n *           X-Expires-After:\n *             type: string\n *             format: date-time\n *             description: 'date in UTC when token expires'\n *       401:\n *         $ref: '#/responses/Unauthorized'\n *       500:\n *         $ref: '#/responses/InternalServerError'\n */\nexport async function userLogin(ctx, next) {\n  try {\n    if (!ctx.request.header.authorization) {\n      ctx.res.unauthorized('Authorization required.', {});\n      return next();\n    }\n\n    const authorisation = ctx.request.header.authorization;\n    if (!authorisation.includes('Basic')) {\n      ctx.res.unauthorized('Basic authentication required.', {});\n      return next();\n    }\n\n    const credentials = atob(authorisation.split(' ')[1]).split(':');\n    const username = credentials[0];\n    const password = credentials[1];\n\n    const response = await login(ctx.db, username, password);\n    const userObj = JSON.parse(JSON.stringify(response.data));\n\n    ctx.status = ctx.res.statusCodes.OK;\n    ctx.body = {\n      jwt: jwt.sign(userObj, ctx.jwtSecret),\n    };\n\n    return next();\n  } catch (err) {\n    console.log('ERRR: ', err);\n    if (err.code === 401) {\n      ctx.res.unauthorized(err.message, err.data);\n      return next();\n    } else if (err.code === 403) {\n      ctx.res.forbidden(err.message, err.data);\n      return next();\n    }\n\n    ctx.res.internalServerError(500, 'Oops, something went wrong.', {});\n    return next();\n  }\n}\n\n/**\n * @swagger\n * /user/logout:\n *   get:\n *     tags:\n *       - Authentication\n *     summary: Logs out current logged in user session.\n *     parameters:\n *       - $ref: '#/parameters/bearer_authorization'\n *     operationId: userLogout\n *     responses:\n *       204:\n *         $ref: '#/responses/NoContent'\n *       401:\n *         $ref: '#/responses/Unauthorized'\n *       500:\n *         $ref: '#/responses/InternalServerError'\n */\nexport async function userLogout(ctx, next) {\n  // TODO - complete the logic of this function...\n\n  ctx.res.noContent({}, 'Successfully logged out.');\n  return next();\n}\n"]}