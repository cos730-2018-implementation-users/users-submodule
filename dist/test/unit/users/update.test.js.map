{"version":3,"sources":["../../../../test/unit/users/update.test.js"],"names":["users","require","userId","testUser","username","firstName","lastName","email","password","cell","status","deleted","update","beforeAll","createUser","then","k","_result","_key","catch","err","Error","test","updateUser","result","expect","toBeDefined","toBe","afterAll","deleteUserObject","console","log"],"mappings":";;;;AAAA,IAAMA,QAAQC,QAAQ,gCAAR,CAAd;;AAEA,IAAIC,SAAS,EAAb;;AAEA,IAAMC,WAAW;AACfC,YAAU,MADK;AAEfC,aAAW,QAFI;AAGfC,YAAU,QAHK;AAIfC,SAAO,eAJQ;AAKfC,YAAU,QALK;AAMfC,QAAM,YANS;AAOfC,UAAQ,QAPO;AAQfC,WAAS;AARM,CAAjB;;AAWA,IAAMC,SAAS;AACbR,YAAU,SADG;AAEbI,YAAU;;AAFG,CAAf;;AAMAK,kEAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACFb,MAAMc,UAAN,CAAiBX,QAAjB,EAA2BY,IAA3B,CAAgC,UAACC,CAAD,EAAO;AAC3Cd,qBAASc,EAAEC,OAAF,CAAU,CAAV,EAAaC,IAAtB;AACD,WAFK,EAEHC,KAFG,CAEG,UAACC,GAAD,EAAS;AAChB,kBAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD,WAJK,CADE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAV;;AAQAE,KAAK,uCAAL,0DAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACvBtB,MAAMuB,UAAN,CAAiBrB,MAAjB,EAAyBU,MAAzB,EAAiCG,IAAjC,CAAsC;AAAA,mBAAKC,EAAEC,OAAF,CAAU,CAAV,CAAL;AAAA,WAAtC,CADuB;;AAAA;AACtCO,gBADsC;;AAE5CC,iBAAOD,MAAP,EAAeE,WAAf;AACAD,iBAAOD,OAAOpB,QAAd,EAAwBuB,IAAxB,CAA6Bf,OAAOR,QAApC;AACAqB,iBAAOD,OAAOnB,SAAd,EAAyBsB,IAAzB,CAA8Bf,OAAOP,SAArC;AACAoB,iBAAOD,OAAOlB,QAAd,EAAwBqB,IAAxB,CAA6Bf,OAAON,QAApC;AACAmB,iBAAOD,OAAOjB,KAAd,EAAqBoB,IAArB,CAA0Bf,OAAOL,KAAjC;AACAkB,iBAAOD,OAAOhB,QAAd,EAAwBmB,IAAxB,CAA6Bf,OAAOJ,QAApC;AACAiB,iBAAOD,OAAOf,IAAd,EAAoBkB,IAApB,CAAyBf,OAAOH,IAAhC;AACAgB,iBAAOD,OAAOd,MAAd,EAAsBiB,IAAtB,CAA2Bf,OAAOF,MAAlC;AACAe,iBAAOD,OAAOb,OAAd,EAAuBgB,IAAvB,CAA4Bf,OAAOD,OAAnC;;AAV4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9C;;AAaAiB,iEAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACD5B,MAAM6B,gBAAN,CAAuB3B,MAAvB,EAA+Ba,IAA/B,CAAoC;AAAA,mBAAKe,QAAQC,GAAR,CAAY,gBAAZ,EAA8Bf,CAA9B,CAAL;AAAA,WAApC,EAA2EG,KAA3E,CAAiF,UAACC,GAAD,EAAS;AAC9F,kBAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD,WAFK,CADC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAT","file":"update.test.js","sourcesContent":["const users = require('../../../app/services/database');\n\nlet userId = '';\n\nconst testUser = {\n  username: 'Test',\n  firstName: 'Test 1',\n  lastName: 'Test 2',\n  email: 'test@test.com',\n  password: '123456',\n  cell: '0123456789',\n  status: 'active',\n  deleted: false,\n};\n\nconst update = {\n  username: 'Test234',\n  password: '188888',\n\n};\n\nbeforeAll(async () => {\n  await users.createUser(testUser).then((k) => {\n    userId = k._result[0]._key;\n  }).catch((err) => {\n    throw new Error(err);\n  });\n});\n\ntest('Tests whether object is fully updated', async () => {\n  const result = await users.updateUser(userId, update).then(k => k._result[0]);\n  expect(result).toBeDefined();\n  expect(result.username).toBe(update.username);\n  expect(result.firstName).toBe(update.firstName);\n  expect(result.lastName).toBe(update.lastName);\n  expect(result.email).toBe(update.email);\n  expect(result.password).toBe(update.password);\n  expect(result.cell).toBe(update.cell);\n  expect(result.status).toBe(update.status);\n  expect(result.deleted).toBe(update.deleted);\n});\n\nafterAll(async () => {\n  await users.deleteUserObject(userId).then(k => console.log('User deleted: ', k)).catch((err) => {\n    throw new Error(err);\n  });\n});\n"]}